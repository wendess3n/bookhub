plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.asciidoctor.convert" version "1.5.9.2"
	id 'java'
	id 'com.palantir.docker' version '0.26.0'
	id 'com.palantir.docker-run' version '0.26.0'
}

group = 'com.miu'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.4.4'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.20.2'

	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE'
	testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE'
}

test {
	useJUnitPlatform()
}

asciidoctor {
	backends 'html5'
	sourceDir 'src/test/resources/doc'
	outputDir 'src/main/resources/doc'
	outputs.upToDateWhen { false } //force always rebuild
	dependsOn test
}

String imageName = "${project.group}/${project.name}"

docker {
	dockerfile file('docker/Dockerfile')
	name imageName
	files bootJar.archiveFile.get()
	buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
}
dockerRun {
	name "${project.name}-container"
	image imageName
	ports '9000:9000'
	env 'SPRING_PROFILES_ACTIVE': 'dev'
	daemonize true
	clean false
}
